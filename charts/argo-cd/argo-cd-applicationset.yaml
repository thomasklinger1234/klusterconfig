---
apiVersion: argoproj.io/v1alpha1
kind: ApplicationSet
metadata:
  name: base
  namespace: argocd
spec:
  goTemplate: true
  goTemplateOptions: ["missingkey=error"]
  generators:
    # Create a matrix generator that will install all chart in all clusters
    - matrix:
        generators:
          # Get all clusters
          - clusters:
              selector:
                matchLabels:
                  argocd.argoproj.io/secret-type: cluster
          - git:
              repoURL: https://github.com/thomasklinger1234/klusterconfig.git
              revision: HEAD
              files:
                # Find all .argocd.json
                - path: 'charts/**/.argocd.json'
              values:
                # Add enabled field if clusters.${name}.enabled = true
                # name comes from the cluster generator
                enabled: '{{ dig "clusters" "prod" "enabled" false . }}'
                data: "{{ . }}"
            selector:
              matchLabels:
                enabled: "true"

#              matchExpressions:
#                - key: "clusters.prod.enabled"
#                  operator: In
#                  values:
#                    - "true"
  template:
    metadata:
      name: '{{ .name }}-{{ .path.basename }}'
      labels:
        environment: '{{ .name }}'
      annotations:
        notifications.argoproj.io/subscribe.on-sync-succeeded.slack: deployments
    spec:
      project: default
      sources:
        # First source is for value files
        # Default revision is HEAD but can be overriden with clusters.${name}.valuesRevision
        - repoURL: https://github.com/thomasklinger1234/klusterconfig.git
          targetRevision: '{{ dig "clusters" .name "valuesRevision" "HEAD" . }}'
          ref: values
        # Second source is for chart
        # Default revision is .source.targetRevision but can be overriden with clusters.${name}.chartRevision
        - repoURL: https://github.com/thomasklinger1234/klusterconfig.git
          targetRevision: '{{ dig "clusters" .name "sourceTargetRevision" .sourceTargetRevision . }}'
          chart: '{{ default "" .sourceChart }}'
          path: '{{ default .path.path .sourcePath }}'
          helm:
            ignoreMissingValueFiles: true
            valueFiles:
              - $values/{{ .path.path }}/values.yaml
              - $values/{{ .path.path }}/values.{{ .name }}.yaml
      destination:
        server: '{{ .server }}'
        namespace: '{{ dig "clusters" .name "destinationNamespace" .destinationNamespace . }}'
      syncPolicy:
        automated:
          prune: true
        syncOptions:
          - ServerSideApply={{ dig "syncPolicy" "syncOptions" "ServerSideApply" "true" . }}
          - CreateNamespace={{ dig "syncPolicy" "syncOptions" "ServerSideApply" "true" . }}
          - Validate=true
          - PruneLast=false
          - RespectIgnoreDifferences=true
          - ApplyOutOfSyncOnly=true
          - CreateNamespace=true
        retry:
          limit: 3 # number of failed sync attempt retries; unlimited number of attempts if less than 0
          backoff:
            duration: 5s # the amount to back off. Default unit is seconds, but could also be a duration (e.g. "2m", "1h")
            factor: 2 # a factor to multiply the base duration after each failed retry
            maxDuration: 5m # the maximum amount of time allowed for the backoff strategy

      # Will ignore differences between live and desired states during the diff. Note that these configurations are not
      # used during the sync process.
      ignoreDifferences:
        # for the specified managedFields managers
        - group: "*"
          kind: "*"
          managedFieldsManagers:
            - kube-controller-manager
